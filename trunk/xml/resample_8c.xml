<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.6">
  <compounddef id="resample_8c" kind="file">
    <compoundname>resample.c</compoundname>
    <includes refid="libresample_8h" local="yes">../include/libresample.h</includes>
    <includes refid="resample__defs_8h" local="yes">resample_defs.h</includes>
    <includes refid="filterkit_8h" local="yes">filterkit.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="29">
        <label>stdlib.h</label>
      </node>
      <node id="23">
        <label>liveplayer08/src/libresample/src/resample.c</label>
        <link refid="resample.c"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>../include/libresample.h</label>
        <link refid="libresample_8h-source"/>
      </node>
      <node id="32">
        <label>string.h</label>
      </node>
      <node id="25">
        <label>resample_defs.h</label>
        <link refid="resample__defs_8h-source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>math.h</label>
      </node>
      <node id="28">
        <label>filterkit.h</label>
        <link refid="filterkit_8h-source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>config.h</label>
        <link refid="config_8h-source"/>
      </node>
      <node id="30">
        <label>stdio.h</label>
      </node>
      <node id="27">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structrsdata">rsdata</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="resample_8c_19a1379b4feee283e6e85cd599e32e5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* resample_dup</definition>
        <argsstring>(const void *handle)</argsstring>
        <name>resample_dup</name>
        <param>
          <type>const void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" line="50" bodyfile="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" bodystart="49" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="resample_8c_181a23e872b8d33e260659a9c5d433424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* resample_open</definition>
        <argsstring>(int highQuality, double minFactor, double maxFactor)</argsstring>
        <name>resample_open</name>
        <param>
          <type>int</type>
          <declname>highQuality</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minFactor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" line="81" bodyfile="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" bodystart="80" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="resample_8c_170b6ec0ecff37e5c1a76f8ac4d84ee91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int resample_get_filter_width</definition>
        <argsstring>(const void *handle)</argsstring>
        <name>resample_get_filter_width</name>
        <param>
          <type>const void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" line="165" bodyfile="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="resample_8c_1d865648128b94cfa46e44cf120605509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int resample_process</definition>
        <argsstring>(void *handle, double factor, float *inBuffer, int inBufferLen, int lastFlag, int *inBufferUsed, float *outBuffer, int outBufferLen)</argsstring>
        <name>resample_process</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>inBuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inBufferLen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lastFlag</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>inBufferUsed</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>outBuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outBufferLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" line="178" bodyfile="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" bodystart="170" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="resample_8c_1ddd2d8ef2ec997104c5c22401a93a734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resample_close</definition>
        <argsstring>(void *handle)</argsstring>
        <name>resample_close</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" line="339" bodyfile="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c" bodystart="338" bodyend="346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>resample.c</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Real-time<sp/>library<sp/>interface<sp/>by<sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Based<sp/>on<sp/>resample-1.7:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>http://www-ccrma.stanford.edu/~jos/resample/</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>License:<sp/>LGPL<sp/>-<sp/>see<sp/>the<sp/>file<sp/>LICENSE.txt<sp/>for<sp/>more<sp/>information</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>the<sp/>main<sp/>source<sp/>file,<sp/>implementing<sp/>all<sp/>of<sp/>the<sp/>API</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>functions<sp/>and<sp/>handling<sp/>all<sp/>of<sp/>the<sp/>buffering<sp/>logic.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>External<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../include/libresample.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;resample_defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filterkit.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*Imp;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*ImpD;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>LpScl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Nmult;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Nwing;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>minFactor;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>maxFactor;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>XSize;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*X;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Xp;<sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>&quot;now&quot;-sample<sp/>pointer<sp/>for<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Xread;<sp/></highlight><highlight class="comment">/*<sp/>Position<sp/>to<sp/>put<sp/>new<sp/>samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Xoff;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>YSize;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*Y;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Yp;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>Time;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}<sp/>rsdata;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*resample_dup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>handle)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rsdata<sp/>*cpy<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rsdata<sp/>*)handle;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>rsdata<sp/>*hp<sp/>=<sp/>(rsdata<sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rsdata));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;minFactor<sp/>=<sp/>cpy-&gt;minFactor;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;maxFactor<sp/>=<sp/>cpy-&gt;maxFactor;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Nmult<sp/>=<sp/>cpy-&gt;Nmult;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;LpScl<sp/>=<sp/>cpy-&gt;LpScl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Nwing<sp/>=<sp/>cpy-&gt;Nwing;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Imp<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>memcpy(hp-&gt;Imp,<sp/>cpy-&gt;Imp,<sp/>hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;ImpD<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>memcpy(hp-&gt;ImpD,<sp/>cpy-&gt;ImpD,<sp/>hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Xoff<sp/>=<sp/>cpy-&gt;Xoff;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;XSize<sp/>=<sp/>cpy-&gt;XSize;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;X<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc((hp-&gt;XSize<sp/>+<sp/>hp-&gt;Xoff)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>memcpy(hp-&gt;X,<sp/>cpy-&gt;X,<sp/>(hp-&gt;XSize<sp/>+<sp/>hp-&gt;Xoff)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Xp<sp/>=<sp/>cpy-&gt;Xp;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Xread<sp/>=<sp/>cpy-&gt;Xread;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;YSize<sp/>=<sp/>cpy-&gt;YSize;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;YSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>memcpy(hp-&gt;Y,<sp/>cpy-&gt;Y,<sp/>hp-&gt;YSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Yp<sp/>=<sp/>cpy-&gt;Yp;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Time<sp/>=<sp/>cpy-&gt;Time;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)hp;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*resample_open(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>highQuality,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minFactor,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxFactor)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Imp64;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Rolloff,<sp/>Beta;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>rsdata<sp/>*hp;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/><sp/>Xoff_min,<sp/>Xoff_max;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>exit<sp/>if<sp/>we<sp/>get<sp/>invalid<sp/>factors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minFactor<sp/>&lt;=<sp/>0.0<sp/>||<sp/>maxFactor<sp/>&lt;=<sp/>0.0<sp/>||<sp/>maxFactor<sp/>&lt;<sp/>minFactor)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>DEBUG</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;libresample:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;minFactor<sp/>and<sp/>maxFactor<sp/>must<sp/>be<sp/>positive<sp/>real<sp/>numbers,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>maxFactor<sp/>should<sp/>be<sp/>larger<sp/>than<sp/>minFactor.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>hp<sp/>=<sp/>(rsdata<sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rsdata));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;minFactor<sp/>=<sp/>minFactor;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;maxFactor<sp/>=<sp/>maxFactor;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highQuality)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Nmult<sp/>=<sp/>35;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Nmult<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;LpScl<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Nwing<sp/>=<sp/>Npc*(hp-&gt;Nmult-1)/2;<sp/></highlight><highlight class="comment">/*<sp/>#<sp/>of<sp/>filter<sp/>coeffs<sp/>in<sp/>right<sp/>wing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>Rolloff<sp/>=<sp/>0.90;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>Beta<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>Imp64<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>lrsLpFilter(Imp64,<sp/>hp-&gt;Nwing,<sp/>0.5*Rolloff,<sp/>Beta,<sp/>Npc);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Imp<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;ImpD<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;Nwing<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;hp-&gt;Nwing;<sp/>i++)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Imp[i]<sp/>=<sp/>Imp64[i];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Storing<sp/>deltas<sp/>in<sp/>ImpD<sp/>makes<sp/>linear<sp/>interpolation</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>filter<sp/>coefficients<sp/>faster<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i&lt;hp-&gt;Nwing-1;<sp/>i++)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;ImpD[i]<sp/>=<sp/>hp-&gt;Imp[i+1]<sp/>-<sp/>hp-&gt;Imp[i];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Last<sp/>coeff.<sp/>not<sp/>interpolated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;ImpD[hp-&gt;Nwing-1]<sp/>=<sp/>-<sp/>hp-&gt;Imp[hp-&gt;Nwing-1];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>free(Imp64);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calc<sp/>reach<sp/>of<sp/>LP<sp/>filter<sp/>wing<sp/>(plus<sp/>some<sp/>creeping<sp/>room)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>Xoff_min<sp/>=<sp/>((hp-&gt;Nmult+1)/2.0)<sp/>*<sp/>MAX(1.0,<sp/>1.0/minFactor)<sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>Xoff_max<sp/>=<sp/>((hp-&gt;Nmult+1)/2.0)<sp/>*<sp/>MAX(1.0,<sp/>1.0/maxFactor)<sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Xoff<sp/>=<sp/>MAX(Xoff_min,<sp/>Xoff_max);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>inBuffer<sp/>size<sp/>at<sp/>least<sp/>4096,<sp/>but<sp/>larger<sp/>if<sp/>necessary</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>order<sp/>to<sp/>store<sp/>the<sp/>minimum<sp/>reach<sp/>of<sp/>the<sp/>LP<sp/>filter<sp/>and<sp/>then<sp/>some.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>allocate<sp/>the<sp/>buffer<sp/>an<sp/>extra<sp/>Xoff<sp/>larger<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>can<sp/>zero-pad<sp/>up<sp/>to<sp/>Xoff<sp/>zeros<sp/>at<sp/>the<sp/>end<sp/>when<sp/>we<sp/>reach<sp/>the</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>of<sp/>the<sp/>input<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;XSize<sp/>=<sp/>MAX(2*hp-&gt;Xoff+10,<sp/>4096);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;X<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc((hp-&gt;XSize<sp/>+<sp/>hp-&gt;Xoff)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Xp<sp/>=<sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Xread<sp/>=<sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>Xoff<sp/>zeros<sp/>at<sp/>begining<sp/>of<sp/>X<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;hp-&gt;Xoff;<sp/>i++)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;X[i]=0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>outBuffer<sp/>long<sp/>enough<sp/>to<sp/>hold<sp/>the<sp/>entire<sp/>processed</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>of<sp/>one<sp/>inBuffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;YSize<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)hp-&gt;XSize)*maxFactor+2.0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Y<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)malloc(hp-&gt;YSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Yp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>hp-&gt;Time<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)hp-&gt;Xoff;<sp/></highlight><highlight class="comment">/*<sp/>Current-time<sp/>pointer<sp/>for<sp/>converter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>return<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)hp;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resample_get_filter_width(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>*handle)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rsdata<sp/>*hp<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rsdata<sp/>*)handle;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resample_process(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>*handle,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>factor,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*inBuffer,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>inBufferLen,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lastFlag,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*inBufferUsed,<sp/></highlight><highlight class="comment">/*<sp/>output<sp/>param<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*outBuffer,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>outBufferLen)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>rsdata<sp/>*hp<sp/>=<sp/>(rsdata<sp/>*)handle;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*Imp<sp/>=<sp/>hp-&gt;Imp;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>*ImpD<sp/>=<sp/>hp-&gt;ImpD;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/>LpScl<sp/>=<sp/>hp-&gt;LpScl;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/><sp/>Nwing<sp/>=<sp/>hp-&gt;Nwing;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/>BOOL<sp/>interpFilt<sp/>=<sp/>FALSE;<sp/></highlight><highlight class="comment">/*<sp/>TRUE<sp/>means<sp/>interpolate<sp/>filter<sp/>coeffs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outSampleCount;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/>UWORD<sp/>Nout,<sp/>Ncreep,<sp/>Nreuse;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nx;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>len;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>DEBUG</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;resample_process:<sp/>in=%d,<sp/>out=%d<sp/>lastFlag=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inBufferLen,<sp/>outBufferLen,<sp/>lastFlag);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>inBufferUsed<sp/>and<sp/>outSampleCount<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>*inBufferUsed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/>outSampleCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factor<sp/>&lt;<sp/>hp-&gt;minFactor<sp/>||<sp/>factor<sp/>&gt;<sp/>hp-&gt;maxFactor)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>DEBUG</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;libresample:<sp/>factor<sp/>%f<sp/>is<sp/>not<sp/>between<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;minFactor=%f<sp/>and<sp/>maxFactor=%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor,<sp/>hp-&gt;minFactor,<sp/>hp-&gt;maxFactor);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>by<sp/>copying<sp/>any<sp/>samples<sp/>still<sp/>in<sp/>the<sp/>Y<sp/>buffer<sp/>to<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp-&gt;Yp<sp/>&amp;&amp;<sp/>(outBufferLen-outSampleCount)&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>MIN(outBufferLen-outSampleCount,<sp/>hp-&gt;Yp);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;len;<sp/>i++)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outBuffer[outSampleCount+i]<sp/>=<sp/>hp-&gt;Y[i];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outSampleCount<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;hp-&gt;Yp-len;<sp/>i++)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Y[i]<sp/>=<sp/>hp-&gt;Y[i+len];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Yp<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>are<sp/>still<sp/>output<sp/>samples<sp/>left,<sp/>return<sp/>now<sp/>-<sp/>we<sp/>need</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>full<sp/>output<sp/>buffer<sp/>available<sp/>to<sp/>us...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp-&gt;Yp)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outSampleCount;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Account<sp/>for<sp/>increased<sp/>filter<sp/>gain<sp/>when<sp/>using<sp/>factors<sp/>less<sp/>than<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/>if<sp/>(factor<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LpScl<sp/>=<sp/>LpScl*factor;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>samples<sp/>we<sp/>can<sp/>process</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>per<sp/>loop<sp/>iteration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;XSize:<sp/>%d<sp/>Xoff:<sp/>%d<sp/>Xread:<sp/>%d<sp/>Xp:<sp/>%d<sp/>lastFlag:<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;XSize,<sp/>hp-&gt;Xoff,<sp/>hp-&gt;Xread,<sp/>hp-&gt;Xp,<sp/>lastFlag);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>as<sp/>many<sp/>samples<sp/>as<sp/>we<sp/>can<sp/>from<sp/>the<sp/>input<sp/>buffer<sp/>into<sp/>X<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>hp-&gt;XSize<sp/>-<sp/>hp-&gt;Xread;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(len<sp/>&gt;=<sp/>(inBufferLen<sp/>-<sp/>(*inBufferUsed)))</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(inBufferLen<sp/>-<sp/>(*inBufferUsed));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;len;<sp/>i++)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;X[hp-&gt;Xread<sp/>+<sp/>i]<sp/>=<sp/>inBuffer[(*inBufferUsed)<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*inBufferUsed<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Xread<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(lastFlag<sp/>&amp;&amp;<sp/>(*inBufferUsed<sp/>==<sp/>inBufferLen))<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>these<sp/>are<sp/>the<sp/>last<sp/>samples,<sp/>zero-pad<sp/>the</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>of<sp/>the<sp/>input<sp/>buffer<sp/>and<sp/>make<sp/>sure<sp/>we<sp/>process</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>the<sp/>way<sp/>to<sp/>the<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>hp-&gt;Xread<sp/>-<sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;hp-&gt;Xoff;<sp/>i++)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;X[hp-&gt;Xread<sp/>+<sp/>i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nx<sp/>=<sp/>hp-&gt;Xread<sp/>-<sp/>2<sp/>*<sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;new<sp/>len=%d<sp/>Nx=%d\n&quot;</highlight><highlight class="normal">,<sp/>len,<sp/>Nx);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nx<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Resample<sp/>stuff<sp/>in<sp/>input<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(factor<sp/>&gt;=<sp/>1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SrcUp()<sp/>is<sp/>faster<sp/>if<sp/>we<sp/>can<sp/>use<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nout<sp/>=<sp/>lrsSrcUp(hp-&gt;X,<sp/>hp-&gt;Y,<sp/>factor,<sp/>&amp;hp-&gt;Time,<sp/>Nx,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nwing,<sp/>LpScl,<sp/>Imp,<sp/>ImpD,<sp/>interpFilt);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nout<sp/>=<sp/>lrsSrcUD(hp-&gt;X,<sp/>hp-&gt;Y,<sp/>factor,<sp/>&amp;hp-&gt;Time,<sp/>Nx,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nwing,<sp/>LpScl,<sp/>Imp,<sp/>ImpD,<sp/>interpFilt);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Nout:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>Nout);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Time<sp/>-=<sp/>Nx;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>converter<sp/>Nx<sp/>samples<sp/>back<sp/>in<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Xp<sp/>+=<sp/>Nx;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Advance<sp/>by<sp/>number<sp/>of<sp/>samples<sp/>processed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calc<sp/>time<sp/>accumulation<sp/>in<sp/>Time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ncreep<sp/>=<sp/>(int)(hp-&gt;Time)<sp/>-<sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ncreep)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Time<sp/>-=<sp/>Ncreep;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>time<sp/>accumulation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Xp<sp/>+=<sp/>Ncreep;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>add<sp/>it<sp/>to<sp/>read<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>part<sp/>of<sp/>input<sp/>signal<sp/>that<sp/>must<sp/>be<sp/>re-used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Nreuse<sp/>=<sp/>hp-&gt;Xread<sp/>-<sp/>(hp-&gt;Xp<sp/>-<sp/>hp-&gt;Xoff);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;Nreuse;<sp/>i++)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;X[i]<sp/>=<sp/>hp-&gt;X[i<sp/>+<sp/>(hp-&gt;Xp<sp/>-<sp/>hp-&gt;Xoff)];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;New<sp/>Xread=%d\n&quot;</highlight><highlight class="normal">,<sp/>Nreuse);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Xread<sp/>=<sp/>Nreuse;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Pos<sp/>in<sp/>input<sp/>buff<sp/>to<sp/>read<sp/>new<sp/>data<sp/>into<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Xp<sp/>=<sp/>hp-&gt;Xoff;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>output<sp/>buff<sp/>overflowed<sp/>(shouldn&apos;t<sp/>happen!)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nout<sp/>&gt;<sp/>hp-&gt;YSize)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Nout:<sp/>%d<sp/>YSize:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>Nout,<sp/>hp-&gt;YSize);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;libresample:<sp/>Output<sp/>array<sp/>overflow!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Yp<sp/>=<sp/>Nout;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>as<sp/>many<sp/>samples<sp/>as<sp/>possible<sp/>to<sp/>the<sp/>output<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp-&gt;Yp<sp/>&amp;&amp;<sp/>(outBufferLen-outSampleCount)&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>MIN(outBufferLen-outSampleCount,<sp/>hp-&gt;Yp);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;len;<sp/>i++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outBuffer[outSampleCount+i]<sp/>=<sp/>hp-&gt;Y[i];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outSampleCount<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;hp-&gt;Yp-len;<sp/>i++)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Y[i]<sp/>=<sp/>hp-&gt;Y[i+len];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hp-&gt;Yp<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>are<sp/>still<sp/>output<sp/>samples<sp/>left,<sp/>return<sp/>now,</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>since<sp/>we<sp/>need<sp/>the<sp/>full<sp/>output<sp/>buffer<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hp-&gt;Yp)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outSampleCount;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resample_close(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>rsdata<sp/>*hp<sp/>=<sp/>(rsdata<sp/>*)handle;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/>free(hp-&gt;X);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>free(hp-&gt;Y);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>free(hp-&gt;Imp);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>free(hp-&gt;ImpD);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/>free(hp);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/philippe/mnt/nfs/serveur/philippe/Documents/programation/C_C++/live-player/kdevelop/liveplayer08/src/libresample/src/resample.c"/>
  </compounddef>
</doxygen>
